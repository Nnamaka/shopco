// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MagicLink {
  id        String   @id @default(uuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
}

model Container {
  id            String          @id @default(cuid())
  title         String
  description   String          @db.Text
  price         Decimal         @db.Decimal(10, 2)
  images        String[]        // Array of image URLs
  size          ContainerSize
  condition     String
  location      String
  isAvailable   Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Supplier of the container
  supplierId    String?
  
  // Additional details
  manufacturerInfo String?      @db.Text
  yearManufactured Int?
  specifications   Json?        // Flexible JSON field for additional specs
  
  // Relations
  purchases     Purchase[]
}

enum ContainerSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
  CUSTOM
}

model Purchase {
  id            String    @id @default(cuid())
  customerId    String
  containerId   String
  container     Container @relation(fields: [containerId], references: [id])
  status        PurchaseStatus @default(PENDING)
  amount        Decimal   @db.Decimal(10, 2)
  paymentMethod String?
  paymentId     String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Additional purchase details
  shippingAddress String?  @db.Text
  trackingNumber  String?
  estimatedDelivery DateTime?
}

enum PurchaseStatus {
  PENDING
  PAYMENT_RECEIVED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}